#######################################
# PHP CI - thomasvanzadelhoff.nl
# @author Thomas van Zadelhoff
#######################################
name: Building Docker images

on:
  workflow_call:
    inputs:
      project:
        description: "ArgoCD Autopilot project name"
        type: string
        required: true
      application:
        description: "ArgoCD Autopilot app name"
        type: string
        required: true
      application_type:
        required: true
        type: string
      build_worker:
        required: true
        default: false
        type: boolean
      organisation:
        description: "[Overwrite] $github_repository_owner"
        type: string
        required: false
    secrets:
      token:
        required: true

env:
  registry: ghcr.io
  image_name: ${{ github.repository }}
  organisation: ${{inputs.organisation || github.repository_owner}}

jobs:
  build-and-push:
    name: üöÄ Build & push
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: üöö Fetching code
        uses: actions/checkout@master
        with:
          token: ${{ secrets.token }}
          submodules: "recursive"

      - name: üîë Authorizing with container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.token }}

      - name: üî• Firing up Docker builder
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true

      - name: ‚ôªÔ∏è Setting up cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ env.image_name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ env.image_name }}

      ###########################
      # Build PHP
      ###########################
      - name: ‚§µÔ∏è PHP - Adding metadata
        id: php_meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.registry }}/${{ env.image_name }}/php
          tags: type=sha,prefix=,format=long

      - name: üöÄ PHP - Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: .ci/${{ inputs.application_type }}/Dockerfile
          push: true
          target: ${{ inputs.application_type }}
          tags: ${{ steps.php_meta.outputs.tags }}
          labels: ${{ steps.php_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      ###########################
      # Build worker (optional)
      ###########################
      - name: ‚§µÔ∏è Worker - Adding metadata
        id: worker_meta
        if: ${{ inputs.build_worker }}
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.registry }}/${{ env.image_name }}/php_queue
          tags: type=sha,prefix=,format=long

      - name: üöÄ Worker - Build and push
        uses: docker/build-push-action@v2
        if: ${{ inputs.build_worker }}
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: .ci/${{ inputs.application_type }}/Dockerfile
          push: true
          target: ${{ inputs.application_type }}_queue
          tags: ${{ steps.worker_meta.outputs.tags }}
          labels: ${{ steps.worker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      ###########################
      # Build Caddy
      ###########################
      - name: ‚§µÔ∏è Caddy - Adding metadata
        id: caddy_meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.registry }}/${{ env.image_name }}/caddy
          tags: type=sha,prefix=,format=long

      - name: üöÄ Caddy - Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: .ci/${{ inputs.application_type }}/Dockerfile
          push: true
          target: "caddy"
          tags: ${{ steps.caddy_meta.outputs.tags }}
          labels: ${{ steps.caddy_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: ‚ôªÔ∏è Saving cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: üéâ Releasing
        uses: benc-uk/workflow-dispatch@master
        with:
          workflow: Release new version
          repo: ${{ env.organisation }}/continuous-delivery
          ref: "refs/heads/main"
          token: ${{ secrets.token }}
          inputs: '{ "image": "ghcr.io/php=${{ steps.php_meta.outputs.tags }} ghcr.io/php_queue=${{ steps.worker_meta.outputs.tags || steps.php_meta.outputs.tags }} ghcr.io/caddy=${{ steps.caddy_meta.outputs.tags }}", "project": "${{ inputs.project }}", "application": "${{ inputs.application }}" }'
